#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server-sunny:server');
var http = require('http');
// cron jobs
const cron = require('node-cron');
const shell = require('shelljs');
//

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/*
  Cron jobs
*/
// Todo: add dynamic category id

if (process.env.NODE_ENV === 'production') {
  cron.schedule('1 * * * *', () => {
    console.log('running a cron task: category #1: ');
    if (shell.exec(`NODE_ENV=${app.settings.env} node tasks/saveArticlesList.js --c=1`).code === 0) {
      // error occurred
      shell.exit(1);
      shell.echo('error occurred when running cron task');
    } else {
      shell.echo('cron task successfully run: category #1');
    }
  });

  cron.schedule('2 * * * *', () => {
    console.log('running a cron task: category #2');
    if (shell.exec(`NODE_ENV=${app.settings.env} node tasks/saveArticlesList.js --c=2`).code === 0) {
      // error occurred
      shell.exit(1);
      shell.echo('error occurred when running cron task');
    } else {
      shell.echo('cron task successfully run: category #2');
    }
  });

  cron.schedule('3 * * * *', () => {
    console.log('running a cron task: category #3');
    if (shell.exec(`NODE_ENV=${app.settings.env} node tasks/saveArticlesList.js --c=3`).code === 0) {
      // error occurred
      shell.exit(1);
      shell.echo('error occurred when running cron task');
    } else {
      shell.echo('cron task successfully run: category #3');
    }
  });

  cron.schedule('5 * * * *', () => {
    console.log('running a cron task: category #5');
    if (shell.exec(`NODE_ENV=${app.settings.env} node tasks/saveArticlesList.js --c=5`).code === 0) {
      // error occurred
      shell.exit(1);
      shell.echo('error occurred when running cron task');
    } else {
      shell.echo('cron task successfully run: category #5');
    }
  });

  cron.schedule('7 * * * *', () => {
    console.log('running a cron task: category #7');
    if (shell.exec(`NODE_ENV=${app.settings.env} node tasks/saveArticlesList.js --c=7`).code === 0) {
      // error occurred
      shell.exit(1);
      shell.echo('error occurred when running cron task');
    } else {
      shell.echo('cron task successfully run: category #7');
    }
  });

  cron.schedule('8 * * * *', () => {
    console.log('running a cron task: category #8');
    if (shell.exec(`NODE_ENV=${app.settings.env} node tasks/saveArticlesList.js --c=8`).code === 0) {
      // error occurred
      shell.exit(1);
      shell.echo('error occurred when running cron task');
    } else {
      shell.echo('cron task successfully run: category #8');
    }
  });
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
